name: React Build Pipeline

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

#### Global environment variable ####
env:
  NODE_VERSION: 22
  IMAGE_NAME: react-app
  CONTAINER_NAME: react-container
  REGISTRY: ghcr.io
  IMAGE_TAG: latest

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      #### 1. Checkout the latest code ####
      - name: Checkout the latest code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Verify the latest code checkout
        run: |
          echo "Verifying checkout..."
          pwd
          ls -la 
          git status

      #### 2.  Set up Node.js environment ####
      - name: Set up Node.js environment
        id: setup-node
        run: |
          echo "Checking Node.js environment..."
          if command -v node >/dev/null 2>&1 && command -v npm >/dev/null 2>&1; then
            echo "Node.js is already installed."
            echo "skip_node=true" >> $GITHUB_ENV
          else
            echo "Node.js is not installed. Installing now..."
            echo "skip_node=false" >> $GITHUB_ENV
          fi

      - name: Set up Node.js
        if: env.skip_node == 'false'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          check-latest: true

      - name: Verify Node.js and npm versions
        run: |
          echo "Node.js version:"
          node -v
          echo "npm version:"
          npm -v

      #### 3. Install dependencies ####
      - name: Install dependencies
        run: |
          echo "Installing dependencies..."
          if npm install; then
            echo "Dependencies installed successfully."
          else
            echo "Failed to install dependencies."
            exit 1
          fi

      #### 4. Run tests ####
      # - name: Run tests
      #   run: |
      #     echo "Running tests..."
      #     if npm pkg get scripts.test | grep -q 'null'; then
      #       echo "No test script found in package.json. Skipping tests..."
      #     else
      #       echo "Test script found. Executing tests..."
      #       if npm run test; then
      #         echo "All tests passed successfully."
      #       else
      #         echo "Some tests failed. Check the logs above for details."
      #         exit 1
      #       fi
      #     fi

      #### 5. Build React app ####
      - name: Build React app
        run: |
          echo "Building the React app..."
          if npm run build; then
            echo "React app built successfully."
          else
            echo "Failed to build the React app." >&2
            exit 1
          fi

      - name: Ensure Docker is installed
        run: |
          if ! command -v docker &> /dev/null
          then
            echo "Docker not found â€” installing now..."
            sudo apt-get update
            sudo apt-get install -y ca-certificates curl gnupg lsb-release
            sudo mkdir -p /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
            echo \
              "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \
              https://download.docker.com/linux/ubuntu \
              $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
          else
            echo "Docker is already installed!"
            docker --version
          fi

      - name: Verify Docker Installation
        run: docker --version

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        run: docker build -t ${{ env.IMAGE_NAME }} .

      - name: Tag image
        run: docker tag ${{ env.IMAGE_NAME }} ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest

      - name: Push image to Docker Hub
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest

      #### 6. Upload build artifact to GitHub ####
      - name: Upload production build artifact
        if: success()
        run: |
          echo "Preparing to upload production build artifact..."
          if [ -d "dist" ]; then
            echo "Build directory found. Contents:"
            ls -la dist
          else
            echo "Build directory not found. Ensure 'npm run build' completed successfully."
            exit 1
          fi

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: react-build-${{ github.run_number }}
          path: |
            dist/
          if-no-files-found: error
          retention-days: 7
            echo "Build artifact 'react-build-${{ github.run_number }}' uploaded successfully."

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      #### 1. Dowload build artifact ####
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: react-build-${{ github.run_number }}
          path: dist/

      - name: Verify downloaded artifact
        run: |
          echo "Build artifact 'react-build-${{ github.run_number }}' downloaded successfully."
          echo "Contents of the build directory:"
          ls -la dist/

      #### 2. Deploy to GitHub Pages ####
      - name: Deploy to GitHub Pages
        id: deploy
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GH_PAT }}
          publish_dir: ./dist

      #### 3. Deployment success message ####
      - name: Deployment status message
        run: |
          if [ "${{ steps.deploy.outcome }}" = "success" ]; then
            echo "Deployment succeeded."
          else
            echo "Deployment failed. Please check the logs for details."
            exit 1
          fi
