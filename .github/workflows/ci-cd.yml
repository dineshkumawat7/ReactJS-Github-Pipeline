name: React + Vite CI/CD Pipeline

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

#===============================================================
################# Global environment variable ##################
#===============================================================
env:
  NODE_VERSION: 22.21.0
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  IMAGE_NAME: react-vite-app
  IMAGE_TAG: "${GITHUB_SHA::7}"
  RENDER_API_KEY: ${{ secrets.RENDER_SERVICE_API_KEY }}
  RENDER_SERVICE_NAME: test-react-render-service
jobs:
  build:
    runs-on: self-hosted
    steps:
      #===============================================================
      ################# 1. Checkout the latest code ##################
      #===============================================================
      - name: Checkout the latest code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      #================================================================
      ################# 2. Set up Node.js environment #################
      #================================================================
      - name: Set up Node.js environment
        run: |
          echo "Setting up Node.js environment..."
          if command -v node >/dev/null 2>&1 && command -v npm >/dev/null 2>&1; then
            CURRENT_VERSION=$(node -v | sed 's/v//g' | cut -d. -f1)
            echo "Current Node.js version: $CURRENT_VERSION"
            if [ "$CURRENT_VERSION" -eq "${NODE_VERSION}" ]; then
              echo "Node.js version ${NODE_VERSION} is already installed."
            else
              echo "Node.js version mismatch (found v${CURRENT_VERSION}, expected v${NODE_VERSION}). Updating..."
              curl -fsSL https://nodejs.org/dist/v${{ env.NODE_VERSION }}/node-v${{ env.NODE_VERSION }}-linux-x64.tar.xz -o node.tar.xz
              sudo mkdir -p /usr/local/node
              sudo tar -xJf node.tar.xz -C /usr/local/node --strip-components=1
              rm node.tar.xz
              echo 'export PATH=/usr/local/nodejs/bin:$PATH' >> ~/.bashrc
              source ~/.bashrc
              echo "Node.js updated to version $(node -v)"
            fi
          else
            echo "Node.js is not installed. Installing Node.js version ${{ env.NODE_VERSION }}..."
            curl -fsSL https://nodejs.org/dist/v${{ env.NODE_VERSION }}/node-v${{ env.NODE_VERSION }}-linux-x64.tar.xz -o node.tar.xz
            sudo mkdir -p /usr/local/node
            sudo tar -xJf node.tar.xz -C /usr/local/node --strip-components=1
            rm node.tar.xz
            echo 'export PATH=/usr/local/nodejs/bin:$PATH' >> ~/.bashrc
            source ~/.bashrc
            echo "Node.js installed successfully."
          fi
          echo "Node.js version: $(node -v)"
          echo "npm version: $(npm -v)"
          echo "Node.js environment setup completed."

      #==================================================================
      ################# 3. Install project dependencies #################
      #==================================================================
      - name: Install dependencies
        run: |
          echo "Installing dependencies..."
          if npm install --prefer-offline; then
            echo "Dependencies installed successfully."
          else
            echo "Failed to install dependencies. Exiting..." >&2
            exit 1
          fi

      #=================================================================
      ######################### 4. Run tests  ##########################
      #=================================================================
      # - name: Run tests
      #   run: |
      #     echo "Running tests..."
      #     if npm pkg get scripts.test | grep -q 'null'; then
      #       echo "No test script found in package.json. Skipping tests..."
      #     else
      #       echo "Test script found. Executing tests..."
      #       if npm run test; then
      #         echo "All tests passed successfully."
      #       else
      #         echo "Some tests failed. Check the logs above for details."
      #         exit 1
      #       fi
      #     fi

      #===============================================================
      ###################### 5. Build React app ######################
      #===============================================================
      - name: Build React app
        run: |
          echo "Building the React app..."
          if npm run build; then
            echo "React app built successfully."
          else
            echo "Failed to build the React app." >&2
            exit 1
          fi

      #================================================================
      ############## 6. Checking for Docker installation ##############
      #================================================================
      - name: Checking for Docker installation
        run: |
          echo "Checking for Docker installation..."

          if ! command -v docker &> /dev/null
          then
            echo "Docker not found â€” installing now..."

            echo "Updating package list..."
            sudo apt-get update -y

            echo "Installing prerequisites..."
            sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common

            echo "Adding Docker's official GPG key..."
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
           
            echo "Adding Docker repository..."
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] \
             https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

            echo "Updating package list again..."
            sudo apt-get update -y

            echo "Installing Docker CE..."
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io

            echo "Docker installed successfully!"
          else
            echo "Docker is already installed!"
          fi
          docker --version
          echo "Docker setup check completed."

      #================================================================
      ################# 7. Log in to Docker Hub ################
      #================================================================
      - name: Log in to Docker Hub
        env:
          DOCKERHUB_USERNAME: ${{ env.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ env.DOCKERHUB_TOKEN }}
        run: |
          echo "Logging in to Docker Hub..."
          if echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin; then
            echo "Logged in to Docker Hub successfully."
          else
            echo "Docker Hub login failed. Exiting..." >&2
            exit 1
          fi

      #================================================================
      ################ 8. Build, Tag & Push Docker image ##############
      #================================================================
      - name: Build, Tag & Push Docker Image
        run: |
          IMAGE_NAME=${{ env.IMAGE_NAME }}
          IMAGE_TAG=${{ env.IMAGE_TAG }}
          DOCKERHUB_USERNAME=${{ env.DOCKERHUB_USERNAME }}
          DOCKER_IMAGE="$DOCKERHUB_USERNAME/$IMAGE_NAME"

          echo "Image Name      : $IMAGE_NAME"
          echo "Image Tag       : $IMAGE_TAG"
          echo "Docker Hub Repo : $DOCKER_IMAGE"
          echo "--------------------------------------------------"

          echo "Building Docker image: $IMAGE_NAME..."
          if docker build -t $IMAGE_NAME:$IMAGE_TAG .; then
            echo "Docker image built successfully: $IMAGE_NAME:$IMAGE_TAG"
          else
            echo "Failed to build Docker image. Exiting..." >&2
            exit 1
          fi

          echo "Tagging Docker image for Docker Hub..."
          if docker tag $IMAGE_NAME:$IMAGE_TAG $DOCKER_IMAGE:$IMAGE_TAG; then
            echo "Docker image tagged successfully: $DOCKER_IMAGE:$IMAGE_TAG"
          else
            echo "Failed to tag Docker image. Exiting..." >&2
            exit 1
          fi

          echo "Pushing Docker image to Docker Hub..."
          if docker push $DOCKER_IMAGE:$IMAGE_TAG; then
            echo "Docker image pushed successfully to Docker Hub: $DOCKER_IMAGE:$IMAGE_TAG"
          else
            echo "Failed to push Docker image to Docker Hub. Exiting..." >&2
            exit 1
          fi
          echo "Docker image build, tag, and push completed!"
  deploy:
    runs-on: self-hosted
    needs: build
    steps:
      #================================================================
      ################# 1. Log in to Docker Hub ################
      #================================================================
      - name: Log in to Docker Hub
        env:
          DOCKERHUB_USERNAME: ${{ env.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ env.DOCKERHUB_TOKEN }}
        run: |
          echo "Logging in to Docker Hub..."
          if echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin; then
            echo "Logged in to Docker Hub successfully."
          else
            echo "Docker Hub login failed. Exiting..." >&2
            exit 1
          fi

      #===============================================================
      ############ 2. Pull Docker image from DockerHub ###############
      #===============================================================
      - name: Pull Docker image from DockerHub
        run: |
          IMAGE_NAME=${{ env.IMAGE_NAME }}
          IMAGE_TAG=${{ env.IMAGE_TAG }}
          DOCKERHUB_USERNAME=${{ env.DOCKERHUB_USERNAME }}
          DOCKER_IMAGE="$DOCKERHUB_USERNAME/$IMAGE_NAME:$IMAGE_TAG"

          echo "Pulling docker image from DockerHub... $DOCKER_IMAGE"
          if docker pull "$DOCKER_IMAGE"; then
            echo "Successfully pulled image: $DOCKER_IMAGE"
          else
            echo "Failed to pull Docker image. Exiting..." >&2
            exit 1
          fi

      #===============================================================
      ########## 3. Checking for Render CLI installation #############
      #===============================================================
      - name: Checking for Render CLI installation
        run: |
          echo "Checking for Render CLI installation..."

          if ! command -v render &> /dev/null
          then
            echo "Render CLI not found. Installing version v2.4.2..."
            DOWNLOAD_URL="https://github.com/render-oss/cli/releases/download/v2.4.2/cli_2.4.2_linux_amd64.zip"
            TEMP_FILE="render_cli.zip"
            echo "Downloading Render CLI from $DOWNLOAD_URL"
            curl -fSL $DOWNLOAD_URL -o $TEMP_FILE
            echo "Extracting Render CLI..."
            unzip $TEMP_FILE
            echo "Moving Render CLI to /usr/local/bin/render..."
            sudo mv cli_v2.4.2 /usr/local/bin/render
            echo "Cleaning up temporary files..."
            rm -f $TEMP_FILE
          else
            echo "Render CLI already installed. Skipping installation."
          fi
          echo "Render CLI Version: $(render --version)"
          echo "Render CLI setup completed successfully."

      #===============================================================
      ################## 4. Log in to Render CLI #####################
      #===============================================================
      - name: Log in to Render CLI
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_SERVICE_API_KEY }}
        run: |
          echo "Logging in to Render CLI..."
          export RENDER_API_KEY="$RENDER_API_KEY"
          render login -o json
          echo "Login successful!"

      #===============================================================
      ############### 5. Deploy Docker image on Render ###############
      #===============================================================
      - name: Trigger deploy with Render CLI
        run: |
          IMAGE_NAME=${{ env.IMAGE_NAME }}
          IMAGE_TAG=${{ env.IMAGE_TAG }}
          DOCKERHUB_USERNAME=${{ env.DOCKERHUB_USERNAME }}
          DOCKER_IMAGE="$DOCKERHUB_USERNAME/$IMAGE_NAME:$IMAGE_TAG"

          echo "Triggering deployment for service ID: $SERVICE_ID"
          render deploys create srv-d3rn826r433s73eahqe0 \
            --image $DOCKER_IMAGE \
            --output json --confirm
          echo "Deployment success..."
