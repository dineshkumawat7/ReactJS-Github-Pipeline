name: React Build Pipeline

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

#### Global environment variable ####
env:
  NODE_VERSION: 22
  IMAGE_NAME: react-app
  CONTAINER_NAME: react-container
  REGISTRY: ghcr.io
  IMAGE_TAG: latest

  RENDER_API_KEY: ${{ secrets.RENDER_SERVICE_API_KEY }}
  DOCKER_IMAGE: your-dockerhub-username/your-app:latest
  RENDER_SERVICE_NAME: test-react-render-service
  RENDER_SERVICE_TYPE: web # 'web' or 'background'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      #### 1. Checkout the latest code ####
      - name: Checkout the latest code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Verify the latest code checkout
        run: |
          echo "Verifying checkout..."
          pwd
          ls -la 
          git status

      #### 2.  Set up Node.js environment ####
      - name: Set up Node.js environment
        id: setup-node
        run: |
          echo "Checking Node.js environment..."
          if command -v node >/dev/null 2>&1 && command -v npm >/dev/null 2>&1; then
            echo "Node.js is already installed."
            echo "skip_node=true" >> $GITHUB_ENV
          else
            echo "Node.js is not installed. Installing now..."
            echo "skip_node=false" >> $GITHUB_ENV
          fi

      - name: Set up Node.js
        if: env.skip_node == 'false'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          check-latest: true

      - name: Verify Node.js and npm versions
        run: |
          echo "Node.js version:"
          node -v
          echo "npm version:"
          npm -v

      #### 3. Install dependencies ####
      - name: Install dependencies
        run: |
          echo "Installing dependencies..."
          if npm install; then
            echo "Dependencies installed successfully."
          else
            echo "Failed to install dependencies."
            exit 1
          fi

      #### 4. Run tests ####
      # - name: Run tests
      #   run: |
      #     echo "Running tests..."
      #     if npm pkg get scripts.test | grep -q 'null'; then
      #       echo "No test script found in package.json. Skipping tests..."
      #     else
      #       echo "Test script found. Executing tests..."
      #       if npm run test; then
      #         echo "All tests passed successfully."
      #       else
      #         echo "Some tests failed. Check the logs above for details."
      #         exit 1
      #       fi
      #     fi

      #### 5. Build React app ####
      - name: Build React app
        run: |
          echo "Building the React app..."
          if npm run build; then
            echo "React app built successfully."
          else
            echo "Failed to build the React app." >&2
            exit 1
          fi

      - name: Ensure Docker is installed
        run: |
          if ! command -v docker &> /dev/null
          then
            echo "Docker not found â€” installing now..."
            sudo apt-get update
            sudo apt-get install -y ca-certificates curl gnupg lsb-release
            sudo mkdir -p /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
            echo \
              "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \
              https://download.docker.com/linux/ubuntu \
              $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
          else
            echo "Docker is already installed!"
            docker --version
          fi

      - name: Verify Docker Installation
        run: docker --version

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        run: docker build -t ${{ env.IMAGE_NAME }} .

      - name: Tag image
        run: docker tag ${{ env.IMAGE_NAME }} ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest

      - name: Push image to Docker Hub
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # 2. Install Render CLI if not installed
      - name: Install Render CLI
        run: |
          if ! command -v render &> /dev/null
          then
            echo "Render CLI not found. Installing..."
            curl -fsSL https://raw.githubusercontent.com/render-oss/cli/refs/heads/main/bin/install.sh | sh
          else
            echo "Render CLI already installed."
          fi
          export PATH="$HOME/.render/bin:$PATH"
          render --version

      - name: Log in to Render CLI
        run: |
          render login --api-key ${{ secrets.RENDER_SERVICE_API_KEY }}

      # 5. Deploy Docker image on Render
      - name: Deploy to Render
        run: |
          # Check if service exists
          SERVICE_EXISTS=$(render services list | grep -w $RENDER_SERVICE_NAME || true)
          if [ -z "$SERVICE_EXISTS" ]; then
            echo "Service not found. Creating new Render service..."
            render services create \
              --name $RENDER_SERVICE_NAME \
              --service-type $RENDER_SERVICE_TYPE \
              --env docker \
              --docker-image $DOCKER_IMAGE
          else
            echo "Service exists. Updating Docker image..."
            SERVICE_ID=$(render services list | grep -w $RENDER_SERVICE_NAME | awk '{print $1}')
            render services update $SERVICE_ID --docker-image $DOCKER_IMAGE --wait
          fi
          render deploy ${{ secrets.RENDER_SERVICE_ID }}
