name: React Build Pipeline

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

#### Global environment variable ####
env:
  NODE_VERSION: 22
  IMAGE_NAME: react-app
  CONTAINER_NAME: react-container
  REGISTRY: docker.io
  IMAGE_TAG: latest

  RENDER_API_KEY: ${{ secrets.RENDER_SERVICE_API_KEY }}
  DOCKER_IMAGE: dinesh7627/react-app:latest
  RENDER_SERVICE_NAME: test-react-render-service
  RENDER_SERVICE_TYPE: web_service

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      #### 1. Checkout the latest code ####
      - name: Checkout the latest code
        run: |
          echo "Checking out latest code..."
          git clone https://github.com/${{ github.repository }} . --depth=1
          echo "Current Git branch:"
          git branch --show-current

          echo "Current working directory:"
          pwd
          echo "Directory contents:"
          ls -la
          echo "Git status:"
          git status
          echo "Checkout completed successfully!"

      #### 2.  Set up Node.js environment ####
      - name: Set up Node.js environment
        run: |
          echo "Setting up Node.js environment..."
          if command -v node >/dev/null 2>&1 && command -v npm >/dev/null 2>&1; then
            echo "Node.js is already installed."
          else
            echo "Node.js is not installed. Installing Node.js version ${{ env.NODE_VERSION }}..."
            curl -fsSL https://nodejs.org/dist/v${{ env.NODE_VERSION }}/node-v${{ env.NODE_VERSION }}-linux-x64.tar.xz -o node.tar.xz
            sudo mkdir -p /usr/local/node
            sudo tar -xJf node.tar.xz -C /usr/local/node --strip-components=1
            rm node.tar.xz
            export PATH=/usr/local/node/bin:$PATH

            echo "Node.js installed successfully."
          fi
          echo "Node.js version: $(node -v)"
          echo "npm version: $(npm -v)"
          echo "Node.js environment setup completed."

      #### 3. Install dependencies ####
      - name: Install dependencies
        run: |
          echo "Installing dependencies..."
          if npm install; then
            echo "Dependencies installed successfully."
          else
            echo "Failed to install dependencies."
            exit 1
          fi

      #### 4. Run tests ####
      # - name: Run tests
      #   run: |
      #     echo "Running tests..."
      #     if npm pkg get scripts.test | grep -q 'null'; then
      #       echo "No test script found in package.json. Skipping tests..."
      #     else
      #       echo "Test script found. Executing tests..."
      #       if npm run test; then
      #         echo "All tests passed successfully."
      #       else
      #         echo "Some tests failed. Check the logs above for details."
      #         exit 1
      #       fi
      #     fi

      #### 5. Build React app ####
      - name: Build React app
        run: |
          echo "Building the React app..."
          if npm run build; then
            echo "React app built successfully."
          else
            echo "Failed to build the React app." >&2
            exit 1
          fi

      - name: Checking for Docker installation
        run: |
          echo "Checking for Docker installation..."

          if ! command -v docker &> /dev/null
          then
            echo "Docker not found â€” installing now..."

            echo "Updating package list..."
            sudo apt-get update -y

            echo "Installing prerequisites..."
            sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common

            echo "Adding Docker's official GPG key..."
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
           
            echo "Adding Docker repository..."
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] \
             https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

            echo "Updating package list again..."
            sudo apt-get update -y

            echo "Installing Docker CE..."
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io

            echo "Docker installed successfully!"
          else
            echo "Docker is already installed!"
          fi
          docker --version
          echo "Docker setup check completed."

      - name: Log in to Docker Hub
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          echo "Logging in to Docker Hub..."
          echo "${DOCKERHUB_TOKEN}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin
          echo "Logged in to Docker Hub successfully."

      - name: Build Docker image
        run: |
          echo "Building Docker image: ${{ env.IMAGE_NAME }}..."
          docker build -t ${{ env.IMAGE_NAME }} .
          echo "Docker image built successfully: ${{ env.IMAGE_NAME }}"

      - name: Tag image
        run: |
          echo "Tagging Docker image for Docker Hub..."
          docker tag ${{ env.IMAGE_NAME }} ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          echo "Docker image tagged successfully: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest"

      - name: Push image to Docker Hub
        run: |
          echo "Pushing Docker image to Docker Hub..."
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          echo "Docker image pushed successfully to Docker Hub: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest"

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Install Render CLI
        run: |
          echo "Checking for Render CLI installation..."

          if ! command -v render &> /dev/null
          then
            echo "Render CLI not found. Installing version v2.4.2..."
            DOWNLOAD_URL="https://github.com/render-oss/cli/releases/download/v2.4.2/cli_2.4.2_linux_amd64.zip"
            TEMP_FILE="render_cli.zip"
            echo "Downloading Render CLI from $DOWNLOAD_URL"
            curl -fSL $DOWNLOAD_URL -o $TEMP_FILE
            echo "Extracting Render CLI..."
            unzip $TEMP_FILE
            echo "Moving Render CLI to /usr/local/bin/render..."
            sudo mv cli_v2.4.2 /usr/local/bin/render
            echo "Cleaning up temporary files..."
            rm -f $TEMP_FILE
          else
            echo "Render CLI already installed. Skipping installation."
          fi
          echo "Render CLI Version: $(render --version)"
          echo "Render CLI setup completed successfully."

      - name: Log in to Render CLI
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_SERVICE_API_KEY }}
        run: |

          echo "---------------------------------------"
          echo "Logging in to Render CLI..."
          echo "---------------------------------------"
          export RENDER_API_KEY="$RENDER_API_KEY"
          render login -o json
          echo "Login successful!"
          echo "Render Authenticated user:"
          # render whoami -o json

      - name: Ensure Render Service Exists
        run: |
          echo "Checking if Render service '$RENDER_SERVICE_NAME' exists..."

          SERVICE_ID=$(curl -s -H "Authorization: Bearer $RENDER_API_KEY" \
            "https://api.render.com/v1/services" | jq -r ".[] | select(.service.name==\"$RENDER_SERVICE_NAME\") | .service.id")

          if [ -z "$SERVICE_ID" ] || [ "$SERVICE_ID" == "null" ]; then
            echo "Service not found. Creating new service..."
            CREATE_RESPONSE=$(curl -s -X POST https://api.render.com/v1/services \
              -H "Authorization: Bearer $RENDER_API_KEY" \
              -H "Content-Type: application/json" \
              -d "{
                \"service\": {
                  \"name\": \"$RENDER_SERVICE_NAME\",
                  \"type\": \"$RENDER_SERVICE_TYPE\",
                  \"env\": \"docker\",
                  \"plan\": \"free\",
                  \"dockerDetails\": {
                    \"image\": \"$DOCKER_IMAGE\",
                    \"port\": 8080
                  }
                }
              }")

            SERVICE_ID=$(echo $CREATE_RESPONSE | jq -r '.service.id')

            if [ -z "$SERVICE_ID" ] || [ "$SERVICE_ID" == "null" ]; then
              echo "Failed to create Render service. Response:"
              echo "$CREATE_RESPONSE"
              exit 1
            fi

            echo "Created new Render service with ID: $SERVICE_ID"
            echo "SERVICE_ID=$SERVICE_ID" >> $GITHUB_ENV
          else
            echo "Existing service found with ID: $SERVICE_ID"
            echo "SERVICE_ID=$SERVICE_ID" >> $GITHUB_ENV
          fi

      # 5. Deploy Docker image on Render
      - name: Trigger deploy with Render CLI
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_SERVICE_API_KEY }}
          CI: true
        run: |
          echo "Triggering deployment for service ID: $SERVICE_ID"
          render deploys create $SERVICE_ID --output json --confirm
